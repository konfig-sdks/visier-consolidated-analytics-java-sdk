/*
 * Visier Consolidated Analytics APIs
 * Visier APIs for managing consolidated analytics (CA) tenants.
 *
 * The version of the OpenAPI document: 22222222.99201.1200
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ConsolidatedAnalyticsAPIExcludedSourcesListDTO;
import com.konfigthis.client.model.ConsolidatedAnalyticsAPISourceTenantListDTO;
import com.konfigthis.client.model.ConsolidatedAnalyticsAPITenantCreateRequestDTO;
import com.konfigthis.client.model.ConsolidatedAnalyticsAPITenantListResponseDTO;
import com.konfigthis.client.model.ExcludedSourcesBody;
import com.konfigthis.client.model.Status;
import com.konfigthis.client.model.TenantCodeBody;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ConsolidatedAnalyticsV1AlphaApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ConsolidatedAnalyticsV1AlphaApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ConsolidatedAnalyticsV1AlphaApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addExcludedSourcesCall(ExcludedSourcesBody excludedSourcesBody, String tenantId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = excludedSourcesBody;

        // create path and map variables
        String localVarPath = "/v1alpha/admin/consolidated-analytics/tenants/:tenantId/excluded-sources";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addExcludedSourcesValidateBeforeCall(ExcludedSourcesBody excludedSourcesBody, String tenantId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'excludedSourcesBody' is set
        if (excludedSourcesBody == null) {
            throw new ApiException("Missing the required parameter 'excludedSourcesBody' when calling addExcludedSources(Async)");
        }

        return addExcludedSourcesCall(excludedSourcesBody, tenantId, _callback);

    }


    private ApiResponse<ConsolidatedAnalyticsAPIExcludedSourcesListDTO> addExcludedSourcesWithHttpInfo(ExcludedSourcesBody excludedSourcesBody, String tenantId) throws ApiException {
        okhttp3.Call localVarCall = addExcludedSourcesValidateBeforeCall(excludedSourcesBody, tenantId, null);
        Type localVarReturnType = new TypeToken<ConsolidatedAnalyticsAPIExcludedSourcesListDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addExcludedSourcesAsync(ExcludedSourcesBody excludedSourcesBody, String tenantId, final ApiCallback<ConsolidatedAnalyticsAPIExcludedSourcesListDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = addExcludedSourcesValidateBeforeCall(excludedSourcesBody, tenantId, _callback);
        Type localVarReturnType = new TypeToken<ConsolidatedAnalyticsAPIExcludedSourcesListDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddExcludedSourcesRequestBuilder {
        private List<String> excludedSources;
        private String tenantId;

        private AddExcludedSourcesRequestBuilder() {
        }

        /**
         * Set excludedSources
         * @param excludedSources A list of a CA tenant&#39;s excluded sources. (optional)
         * @return AddExcludedSourcesRequestBuilder
         */
        public AddExcludedSourcesRequestBuilder excludedSources(List<String> excludedSources) {
            this.excludedSources = excludedSources;
            return this;
        }
        
        /**
         * Set tenantId
         * @param tenantId The ID of the tenant. For example, WFF_{XXX}~CA{YYY} where {XXX} is the administrating tenant code and {YYY}  is the consolidated analytic tenant code. (optional)
         * @return AddExcludedSourcesRequestBuilder
         */
        public AddExcludedSourcesRequestBuilder tenantId(String tenantId) {
            this.tenantId = tenantId;
            return this;
        }
        
        /**
         * Build call for addExcludedSources
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ExcludedSourcesBody excludedSourcesBody = buildBodyParams();
            return addExcludedSourcesCall(excludedSourcesBody, tenantId, _callback);
        }

        private ExcludedSourcesBody buildBodyParams() {
            ExcludedSourcesBody excludedSourcesBody = new ExcludedSourcesBody();
            excludedSourcesBody.excludedSources(this.excludedSources);
            return excludedSourcesBody;
        }

        /**
         * Execute addExcludedSources request
         * @return ConsolidatedAnalyticsAPIExcludedSourcesListDTO
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ConsolidatedAnalyticsAPIExcludedSourcesListDTO execute() throws ApiException {
            ExcludedSourcesBody excludedSourcesBody = buildBodyParams();
            ApiResponse<ConsolidatedAnalyticsAPIExcludedSourcesListDTO> localVarResp = addExcludedSourcesWithHttpInfo(excludedSourcesBody, tenantId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addExcludedSources request with HTTP info returned
         * @return ApiResponse&lt;ConsolidatedAnalyticsAPIExcludedSourcesListDTO&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ConsolidatedAnalyticsAPIExcludedSourcesListDTO> executeWithHttpInfo() throws ApiException {
            ExcludedSourcesBody excludedSourcesBody = buildBodyParams();
            return addExcludedSourcesWithHttpInfo(excludedSourcesBody, tenantId);
        }

        /**
         * Execute addExcludedSources request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ConsolidatedAnalyticsAPIExcludedSourcesListDTO> _callback) throws ApiException {
            ExcludedSourcesBody excludedSourcesBody = buildBodyParams();
            return addExcludedSourcesAsync(excludedSourcesBody, tenantId, _callback);
        }
    }

    /**
     * Add excluded sources to a consolidated analytics tenant
     * This API adds excluded sources to the list of excluded sources for a consolidated analytics tenant.   &lt;br&gt;**Note:** &lt;em&gt;This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.  If you are interested in using this API, please contact your Customer Success Manager (CSM).&lt;/em&gt;
     * @param excludedSourcesBody  (required)
     * @return AddExcludedSourcesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public AddExcludedSourcesRequestBuilder addExcludedSources() throws IllegalArgumentException {
        return new AddExcludedSourcesRequestBuilder();
    }
    private okhttp3.Call addSourceTenantsCall(TenantCodeBody tenantCodeBody, String tenantId, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tenantCodeBody;

        // create path and map variables
        String localVarPath = "/v1alpha/admin/consolidated-analytics/tenants/:tenantId/source-tenants";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addSourceTenantsValidateBeforeCall(TenantCodeBody tenantCodeBody, String tenantId, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantCodeBody' is set
        if (tenantCodeBody == null) {
            throw new ApiException("Missing the required parameter 'tenantCodeBody' when calling addSourceTenants(Async)");
        }

        return addSourceTenantsCall(tenantCodeBody, tenantId, limit, _callback);

    }


    private ApiResponse<ConsolidatedAnalyticsAPISourceTenantListDTO> addSourceTenantsWithHttpInfo(TenantCodeBody tenantCodeBody, String tenantId, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = addSourceTenantsValidateBeforeCall(tenantCodeBody, tenantId, limit, null);
        Type localVarReturnType = new TypeToken<ConsolidatedAnalyticsAPISourceTenantListDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addSourceTenantsAsync(TenantCodeBody tenantCodeBody, String tenantId, Integer limit, final ApiCallback<ConsolidatedAnalyticsAPISourceTenantListDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = addSourceTenantsValidateBeforeCall(tenantCodeBody, tenantId, limit, _callback);
        Type localVarReturnType = new TypeToken<ConsolidatedAnalyticsAPISourceTenantListDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddSourceTenantsRequestBuilder {
        private List<String> tenantCodes;
        private String tenantId;
        private Integer limit;

        private AddSourceTenantsRequestBuilder() {
        }

        /**
         * Set tenantCodes
         * @param tenantCodes A list of a CA tenant&#39;s source tenants codes. The maximum length is 1000. (optional)
         * @return AddSourceTenantsRequestBuilder
         */
        public AddSourceTenantsRequestBuilder tenantCodes(List<String> tenantCodes) {
            this.tenantCodes = tenantCodes;
            return this;
        }
        
        /**
         * Set tenantId
         * @param tenantId The ID of the tenant. For example, WFF_{XXX}~CA{YYY} where {XXX} is the administrating tenant code and {YYY}  is the consolidated analytic tenant code. (optional)
         * @return AddSourceTenantsRequestBuilder
         */
        public AddSourceTenantsRequestBuilder tenantId(String tenantId) {
            this.tenantId = tenantId;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The maximum number of source tenants to return. The maximum value is 1000. Default is 400. (optional)
         * @return AddSourceTenantsRequestBuilder
         */
        public AddSourceTenantsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for addSourceTenants
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TenantCodeBody tenantCodeBody = buildBodyParams();
            return addSourceTenantsCall(tenantCodeBody, tenantId, limit, _callback);
        }

        private TenantCodeBody buildBodyParams() {
            TenantCodeBody tenantCodeBody = new TenantCodeBody();
            tenantCodeBody.tenantCodes(this.tenantCodes);
            return tenantCodeBody;
        }

        /**
         * Execute addSourceTenants request
         * @return ConsolidatedAnalyticsAPISourceTenantListDTO
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ConsolidatedAnalyticsAPISourceTenantListDTO execute() throws ApiException {
            TenantCodeBody tenantCodeBody = buildBodyParams();
            ApiResponse<ConsolidatedAnalyticsAPISourceTenantListDTO> localVarResp = addSourceTenantsWithHttpInfo(tenantCodeBody, tenantId, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addSourceTenants request with HTTP info returned
         * @return ApiResponse&lt;ConsolidatedAnalyticsAPISourceTenantListDTO&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ConsolidatedAnalyticsAPISourceTenantListDTO> executeWithHttpInfo() throws ApiException {
            TenantCodeBody tenantCodeBody = buildBodyParams();
            return addSourceTenantsWithHttpInfo(tenantCodeBody, tenantId, limit);
        }

        /**
         * Execute addSourceTenants request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ConsolidatedAnalyticsAPISourceTenantListDTO> _callback) throws ApiException {
            TenantCodeBody tenantCodeBody = buildBodyParams();
            return addSourceTenantsAsync(tenantCodeBody, tenantId, limit, _callback);
        }
    }

    /**
     * Add source tenants to a consolidated analytics tenant
     * This API adds source tenants to the list of source tenants for a consolidated analytics tenant.   If successful, the response returns an updated list of source tenants.   &lt;br&gt;**Note:** &lt;em&gt;This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.  If you are interested in using this API, please contact your Customer Success Manager (CSM).&lt;/em&gt;
     * @param tenantCodeBody  (required)
     * @return AddSourceTenantsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public AddSourceTenantsRequestBuilder addSourceTenants() throws IllegalArgumentException {
        return new AddSourceTenantsRequestBuilder();
    }
    private okhttp3.Call createTenantCall(ConsolidatedAnalyticsAPITenantCreateRequestDTO consolidatedAnalyticsAPITenantCreateRequestDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = consolidatedAnalyticsAPITenantCreateRequestDTO;

        // create path and map variables
        String localVarPath = "/v1alpha/admin/consolidated-analytics/tenants";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTenantValidateBeforeCall(ConsolidatedAnalyticsAPITenantCreateRequestDTO consolidatedAnalyticsAPITenantCreateRequestDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'consolidatedAnalyticsAPITenantCreateRequestDTO' is set
        if (consolidatedAnalyticsAPITenantCreateRequestDTO == null) {
            throw new ApiException("Missing the required parameter 'consolidatedAnalyticsAPITenantCreateRequestDTO' when calling createTenant(Async)");
        }

        return createTenantCall(consolidatedAnalyticsAPITenantCreateRequestDTO, _callback);

    }


    private ApiResponse<ConsolidatedAnalyticsAPITenantCreateRequestDTO> createTenantWithHttpInfo(ConsolidatedAnalyticsAPITenantCreateRequestDTO consolidatedAnalyticsAPITenantCreateRequestDTO) throws ApiException {
        okhttp3.Call localVarCall = createTenantValidateBeforeCall(consolidatedAnalyticsAPITenantCreateRequestDTO, null);
        Type localVarReturnType = new TypeToken<ConsolidatedAnalyticsAPITenantCreateRequestDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createTenantAsync(ConsolidatedAnalyticsAPITenantCreateRequestDTO consolidatedAnalyticsAPITenantCreateRequestDTO, final ApiCallback<ConsolidatedAnalyticsAPITenantCreateRequestDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTenantValidateBeforeCall(consolidatedAnalyticsAPITenantCreateRequestDTO, _callback);
        Type localVarReturnType = new TypeToken<ConsolidatedAnalyticsAPITenantCreateRequestDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateTenantRequestBuilder {
        private String tenantCode;

        private CreateTenantRequestBuilder() {
        }

        /**
         * Set tenantCode
         * @param tenantCode The ID of the tenant. For example, WFF_{XXX}~CA{YYY} where {XXX} is the administrating tenant code and {YYY}  is the consolidated analytic tenant code. (optional)
         * @return CreateTenantRequestBuilder
         */
        public CreateTenantRequestBuilder tenantCode(String tenantCode) {
            this.tenantCode = tenantCode;
            return this;
        }
        
        /**
         * Build call for createTenant
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ConsolidatedAnalyticsAPITenantCreateRequestDTO consolidatedAnalyticsAPITenantCreateRequestDTO = buildBodyParams();
            return createTenantCall(consolidatedAnalyticsAPITenantCreateRequestDTO, _callback);
        }

        private ConsolidatedAnalyticsAPITenantCreateRequestDTO buildBodyParams() {
            ConsolidatedAnalyticsAPITenantCreateRequestDTO consolidatedAnalyticsAPITenantCreateRequestDTO = new ConsolidatedAnalyticsAPITenantCreateRequestDTO();
            consolidatedAnalyticsAPITenantCreateRequestDTO.tenantCode(this.tenantCode);
            return consolidatedAnalyticsAPITenantCreateRequestDTO;
        }

        /**
         * Execute createTenant request
         * @return ConsolidatedAnalyticsAPITenantCreateRequestDTO
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ConsolidatedAnalyticsAPITenantCreateRequestDTO execute() throws ApiException {
            ConsolidatedAnalyticsAPITenantCreateRequestDTO consolidatedAnalyticsAPITenantCreateRequestDTO = buildBodyParams();
            ApiResponse<ConsolidatedAnalyticsAPITenantCreateRequestDTO> localVarResp = createTenantWithHttpInfo(consolidatedAnalyticsAPITenantCreateRequestDTO);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createTenant request with HTTP info returned
         * @return ApiResponse&lt;ConsolidatedAnalyticsAPITenantCreateRequestDTO&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ConsolidatedAnalyticsAPITenantCreateRequestDTO> executeWithHttpInfo() throws ApiException {
            ConsolidatedAnalyticsAPITenantCreateRequestDTO consolidatedAnalyticsAPITenantCreateRequestDTO = buildBodyParams();
            return createTenantWithHttpInfo(consolidatedAnalyticsAPITenantCreateRequestDTO);
        }

        /**
         * Execute createTenant request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ConsolidatedAnalyticsAPITenantCreateRequestDTO> _callback) throws ApiException {
            ConsolidatedAnalyticsAPITenantCreateRequestDTO consolidatedAnalyticsAPITenantCreateRequestDTO = buildBodyParams();
            return createTenantAsync(consolidatedAnalyticsAPITenantCreateRequestDTO, _callback);
        }
    }

    /**
     * Create a consolidated analytics tenant
     * This API allows you to create a consolidated analytics tenant.   A new CA tenant has no source tenants and no excluded sources.   **Note:** CA tenant codes must have a prefix of CA. For example, WFF_{XXX}~CA{YYY} where {XXX} is the administrating tenant code and {YYY}  is the consolidated analytic tenant code.   &lt;br&gt;**Note:** &lt;em&gt;This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.  If you are interested in using this API, please contact your Customer Success Manager (CSM).&lt;/em&gt;
     * @param consolidatedAnalyticsAPITenantCreateRequestDTO  (required)
     * @return CreateTenantRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public CreateTenantRequestBuilder createTenant() throws IllegalArgumentException {
        return new CreateTenantRequestBuilder();
    }
    private okhttp3.Call listExcludedSourcesCall(String tenantId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1alpha/admin/consolidated-analytics/tenants/:tenantId/excluded-sources";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listExcludedSourcesValidateBeforeCall(String tenantId, final ApiCallback _callback) throws ApiException {
        return listExcludedSourcesCall(tenantId, _callback);

    }


    private ApiResponse<ConsolidatedAnalyticsAPIExcludedSourcesListDTO> listExcludedSourcesWithHttpInfo(String tenantId) throws ApiException {
        okhttp3.Call localVarCall = listExcludedSourcesValidateBeforeCall(tenantId, null);
        Type localVarReturnType = new TypeToken<ConsolidatedAnalyticsAPIExcludedSourcesListDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listExcludedSourcesAsync(String tenantId, final ApiCallback<ConsolidatedAnalyticsAPIExcludedSourcesListDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = listExcludedSourcesValidateBeforeCall(tenantId, _callback);
        Type localVarReturnType = new TypeToken<ConsolidatedAnalyticsAPIExcludedSourcesListDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListExcludedSourcesRequestBuilder {
        private String tenantId;

        private ListExcludedSourcesRequestBuilder() {
        }

        /**
         * Set tenantId
         * @param tenantId The ID of the tenant. For example, WFF_{XXX}~CA{YYY} where {XXX} is the administrating tenant code and {YYY}  is the consolidated analytic tenant code. (optional)
         * @return ListExcludedSourcesRequestBuilder
         */
        public ListExcludedSourcesRequestBuilder tenantId(String tenantId) {
            this.tenantId = tenantId;
            return this;
        }
        
        /**
         * Build call for listExcludedSources
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listExcludedSourcesCall(tenantId, _callback);
        }


        /**
         * Execute listExcludedSources request
         * @return ConsolidatedAnalyticsAPIExcludedSourcesListDTO
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ConsolidatedAnalyticsAPIExcludedSourcesListDTO execute() throws ApiException {
            ApiResponse<ConsolidatedAnalyticsAPIExcludedSourcesListDTO> localVarResp = listExcludedSourcesWithHttpInfo(tenantId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listExcludedSources request with HTTP info returned
         * @return ApiResponse&lt;ConsolidatedAnalyticsAPIExcludedSourcesListDTO&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ConsolidatedAnalyticsAPIExcludedSourcesListDTO> executeWithHttpInfo() throws ApiException {
            return listExcludedSourcesWithHttpInfo(tenantId);
        }

        /**
         * Execute listExcludedSources request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ConsolidatedAnalyticsAPIExcludedSourcesListDTO> _callback) throws ApiException {
            return listExcludedSourcesAsync(tenantId, _callback);
        }
    }

    /**
     * Retrieve a consolidated analytics tenant&#39;s excluded sources
     * This API allows you to retrieve a CA tenant&#39;s excluded sources.   &lt;br&gt;**Note:** &lt;em&gt;This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.  If you are interested in using this API, please contact your Customer Success Manager (CSM).&lt;/em&gt;
     * @return ListExcludedSourcesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ListExcludedSourcesRequestBuilder listExcludedSources() throws IllegalArgumentException {
        return new ListExcludedSourcesRequestBuilder();
    }
    private okhttp3.Call listSourceTenantsCall(String tenantId, Integer limit, Integer start, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1alpha/admin/consolidated-analytics/tenants/:tenantId/source-tenants";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listSourceTenantsValidateBeforeCall(String tenantId, Integer limit, Integer start, final ApiCallback _callback) throws ApiException {
        return listSourceTenantsCall(tenantId, limit, start, _callback);

    }


    private ApiResponse<ConsolidatedAnalyticsAPISourceTenantListDTO> listSourceTenantsWithHttpInfo(String tenantId, Integer limit, Integer start) throws ApiException {
        okhttp3.Call localVarCall = listSourceTenantsValidateBeforeCall(tenantId, limit, start, null);
        Type localVarReturnType = new TypeToken<ConsolidatedAnalyticsAPISourceTenantListDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listSourceTenantsAsync(String tenantId, Integer limit, Integer start, final ApiCallback<ConsolidatedAnalyticsAPISourceTenantListDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = listSourceTenantsValidateBeforeCall(tenantId, limit, start, _callback);
        Type localVarReturnType = new TypeToken<ConsolidatedAnalyticsAPISourceTenantListDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListSourceTenantsRequestBuilder {
        private String tenantId;
        private Integer limit;
        private Integer start;

        private ListSourceTenantsRequestBuilder() {
        }

        /**
         * Set tenantId
         * @param tenantId The ID of the tenant. For example, WFF_{XXX}~CA{YYY} where {XXX} is the administrating tenant code and {YYY}  is the consolidated analytic tenant code. (optional)
         * @return ListSourceTenantsRequestBuilder
         */
        public ListSourceTenantsRequestBuilder tenantId(String tenantId) {
            this.tenantId = tenantId;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The maximum number of source tenants to return. The maximum value is 1000. Default is 400. (optional)
         * @return ListSourceTenantsRequestBuilder
         */
        public ListSourceTenantsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set start
         * @param start The starting index of the first source tenant to return. Default is 0. (optional)
         * @return ListSourceTenantsRequestBuilder
         */
        public ListSourceTenantsRequestBuilder start(Integer start) {
            this.start = start;
            return this;
        }
        
        /**
         * Build call for listSourceTenants
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listSourceTenantsCall(tenantId, limit, start, _callback);
        }


        /**
         * Execute listSourceTenants request
         * @return ConsolidatedAnalyticsAPISourceTenantListDTO
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ConsolidatedAnalyticsAPISourceTenantListDTO execute() throws ApiException {
            ApiResponse<ConsolidatedAnalyticsAPISourceTenantListDTO> localVarResp = listSourceTenantsWithHttpInfo(tenantId, limit, start);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listSourceTenants request with HTTP info returned
         * @return ApiResponse&lt;ConsolidatedAnalyticsAPISourceTenantListDTO&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ConsolidatedAnalyticsAPISourceTenantListDTO> executeWithHttpInfo() throws ApiException {
            return listSourceTenantsWithHttpInfo(tenantId, limit, start);
        }

        /**
         * Execute listSourceTenants request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ConsolidatedAnalyticsAPISourceTenantListDTO> _callback) throws ApiException {
            return listSourceTenantsAsync(tenantId, limit, start, _callback);
        }
    }

    /**
     * Retrieve a consolidated analytics tenant&#39;s source tenants
     * This API allows you to retrieve a CA tenant&#39;s source tenants.   &lt;br&gt;**Note:** &lt;em&gt;This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.  If you are interested in using this API, please contact your Customer Success Manager (CSM).&lt;/em&gt;
     * @return ListSourceTenantsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ListSourceTenantsRequestBuilder listSourceTenants() throws IllegalArgumentException {
        return new ListSourceTenantsRequestBuilder();
    }
    private okhttp3.Call listTenantsCall(Integer limit, Integer start, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1alpha/admin/consolidated-analytics/tenants";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTenantsValidateBeforeCall(Integer limit, Integer start, final ApiCallback _callback) throws ApiException {
        return listTenantsCall(limit, start, _callback);

    }


    private ApiResponse<ConsolidatedAnalyticsAPITenantListResponseDTO> listTenantsWithHttpInfo(Integer limit, Integer start) throws ApiException {
        okhttp3.Call localVarCall = listTenantsValidateBeforeCall(limit, start, null);
        Type localVarReturnType = new TypeToken<ConsolidatedAnalyticsAPITenantListResponseDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listTenantsAsync(Integer limit, Integer start, final ApiCallback<ConsolidatedAnalyticsAPITenantListResponseDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTenantsValidateBeforeCall(limit, start, _callback);
        Type localVarReturnType = new TypeToken<ConsolidatedAnalyticsAPITenantListResponseDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListTenantsRequestBuilder {
        private Integer limit;
        private Integer start;

        private ListTenantsRequestBuilder() {
        }

        /**
         * Set limit
         * @param limit The maximum number of tenants to return. The maximum value is 1000. Default is 400. (optional)
         * @return ListTenantsRequestBuilder
         */
        public ListTenantsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set start
         * @param start The starting index of the first tenant to return. Default is 0. (optional)
         * @return ListTenantsRequestBuilder
         */
        public ListTenantsRequestBuilder start(Integer start) {
            this.start = start;
            return this;
        }
        
        /**
         * Build call for listTenants
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listTenantsCall(limit, start, _callback);
        }


        /**
         * Execute listTenants request
         * @return ConsolidatedAnalyticsAPITenantListResponseDTO
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ConsolidatedAnalyticsAPITenantListResponseDTO execute() throws ApiException {
            ApiResponse<ConsolidatedAnalyticsAPITenantListResponseDTO> localVarResp = listTenantsWithHttpInfo(limit, start);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listTenants request with HTTP info returned
         * @return ApiResponse&lt;ConsolidatedAnalyticsAPITenantListResponseDTO&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ConsolidatedAnalyticsAPITenantListResponseDTO> executeWithHttpInfo() throws ApiException {
            return listTenantsWithHttpInfo(limit, start);
        }

        /**
         * Execute listTenants request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ConsolidatedAnalyticsAPITenantListResponseDTO> _callback) throws ApiException {
            return listTenantsAsync(limit, start, _callback);
        }
    }

    /**
     * Retrieve a list of all consolidated analytics tenants
     * This API allows you to retrieve the full list of consolidated analytics tenants in your administrating tenant.   &lt;br&gt;**Note:** &lt;em&gt;This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.  If you are interested in using this API, please contact your Customer Success Manager (CSM).&lt;/em&gt;
     * @return ListTenantsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ListTenantsRequestBuilder listTenants() throws IllegalArgumentException {
        return new ListTenantsRequestBuilder();
    }
    private okhttp3.Call removeExcludedSourcesCall(ExcludedSourcesBody excludedSourcesBody, String tenantId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = excludedSourcesBody;

        // create path and map variables
        String localVarPath = "/v1alpha/admin/consolidated-analytics/tenants/:tenantId/excluded-sources";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeExcludedSourcesValidateBeforeCall(ExcludedSourcesBody excludedSourcesBody, String tenantId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'excludedSourcesBody' is set
        if (excludedSourcesBody == null) {
            throw new ApiException("Missing the required parameter 'excludedSourcesBody' when calling removeExcludedSources(Async)");
        }

        return removeExcludedSourcesCall(excludedSourcesBody, tenantId, _callback);

    }


    private ApiResponse<ConsolidatedAnalyticsAPIExcludedSourcesListDTO> removeExcludedSourcesWithHttpInfo(ExcludedSourcesBody excludedSourcesBody, String tenantId) throws ApiException {
        okhttp3.Call localVarCall = removeExcludedSourcesValidateBeforeCall(excludedSourcesBody, tenantId, null);
        Type localVarReturnType = new TypeToken<ConsolidatedAnalyticsAPIExcludedSourcesListDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeExcludedSourcesAsync(ExcludedSourcesBody excludedSourcesBody, String tenantId, final ApiCallback<ConsolidatedAnalyticsAPIExcludedSourcesListDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeExcludedSourcesValidateBeforeCall(excludedSourcesBody, tenantId, _callback);
        Type localVarReturnType = new TypeToken<ConsolidatedAnalyticsAPIExcludedSourcesListDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveExcludedSourcesRequestBuilder {
        private List<String> excludedSources;
        private String tenantId;

        private RemoveExcludedSourcesRequestBuilder() {
        }

        /**
         * Set excludedSources
         * @param excludedSources A list of a CA tenant&#39;s excluded sources. (optional)
         * @return RemoveExcludedSourcesRequestBuilder
         */
        public RemoveExcludedSourcesRequestBuilder excludedSources(List<String> excludedSources) {
            this.excludedSources = excludedSources;
            return this;
        }
        
        /**
         * Set tenantId
         * @param tenantId The ID of the tenant. For example, WFF_{XXX}~CA{YYY} where {XXX} is the administrating tenant code and {YYY}  is the consolidated analytic tenant code. (optional)
         * @return RemoveExcludedSourcesRequestBuilder
         */
        public RemoveExcludedSourcesRequestBuilder tenantId(String tenantId) {
            this.tenantId = tenantId;
            return this;
        }
        
        /**
         * Build call for removeExcludedSources
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ExcludedSourcesBody excludedSourcesBody = buildBodyParams();
            return removeExcludedSourcesCall(excludedSourcesBody, tenantId, _callback);
        }

        private ExcludedSourcesBody buildBodyParams() {
            ExcludedSourcesBody excludedSourcesBody = new ExcludedSourcesBody();
            excludedSourcesBody.excludedSources(this.excludedSources);
            return excludedSourcesBody;
        }

        /**
         * Execute removeExcludedSources request
         * @return ConsolidatedAnalyticsAPIExcludedSourcesListDTO
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ConsolidatedAnalyticsAPIExcludedSourcesListDTO execute() throws ApiException {
            ExcludedSourcesBody excludedSourcesBody = buildBodyParams();
            ApiResponse<ConsolidatedAnalyticsAPIExcludedSourcesListDTO> localVarResp = removeExcludedSourcesWithHttpInfo(excludedSourcesBody, tenantId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeExcludedSources request with HTTP info returned
         * @return ApiResponse&lt;ConsolidatedAnalyticsAPIExcludedSourcesListDTO&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ConsolidatedAnalyticsAPIExcludedSourcesListDTO> executeWithHttpInfo() throws ApiException {
            ExcludedSourcesBody excludedSourcesBody = buildBodyParams();
            return removeExcludedSourcesWithHttpInfo(excludedSourcesBody, tenantId);
        }

        /**
         * Execute removeExcludedSources request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ConsolidatedAnalyticsAPIExcludedSourcesListDTO> _callback) throws ApiException {
            ExcludedSourcesBody excludedSourcesBody = buildBodyParams();
            return removeExcludedSourcesAsync(excludedSourcesBody, tenantId, _callback);
        }
    }

    /**
     * Remove excluded sources from a consolidated analytics tenants
     * This API removes excluded sources from the list of excluded sources for a consolidated analytics tenant.   &lt;br&gt;**Note:** &lt;em&gt;This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.  If you are interested in using this API, please contact your Customer Success Manager (CSM).&lt;/em&gt;
     * @param excludedSourcesBody  (required)
     * @return RemoveExcludedSourcesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public RemoveExcludedSourcesRequestBuilder removeExcludedSources() throws IllegalArgumentException {
        return new RemoveExcludedSourcesRequestBuilder();
    }
    private okhttp3.Call removeSourceTenantsCall(TenantCodeBody tenantCodeBody, String tenantId, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tenantCodeBody;

        // create path and map variables
        String localVarPath = "/v1alpha/admin/consolidated-analytics/tenants/:tenantId/source-tenants";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeSourceTenantsValidateBeforeCall(TenantCodeBody tenantCodeBody, String tenantId, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantCodeBody' is set
        if (tenantCodeBody == null) {
            throw new ApiException("Missing the required parameter 'tenantCodeBody' when calling removeSourceTenants(Async)");
        }

        return removeSourceTenantsCall(tenantCodeBody, tenantId, limit, _callback);

    }


    private ApiResponse<ConsolidatedAnalyticsAPISourceTenantListDTO> removeSourceTenantsWithHttpInfo(TenantCodeBody tenantCodeBody, String tenantId, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = removeSourceTenantsValidateBeforeCall(tenantCodeBody, tenantId, limit, null);
        Type localVarReturnType = new TypeToken<ConsolidatedAnalyticsAPISourceTenantListDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeSourceTenantsAsync(TenantCodeBody tenantCodeBody, String tenantId, Integer limit, final ApiCallback<ConsolidatedAnalyticsAPISourceTenantListDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeSourceTenantsValidateBeforeCall(tenantCodeBody, tenantId, limit, _callback);
        Type localVarReturnType = new TypeToken<ConsolidatedAnalyticsAPISourceTenantListDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveSourceTenantsRequestBuilder {
        private List<String> tenantCodes;
        private String tenantId;
        private Integer limit;

        private RemoveSourceTenantsRequestBuilder() {
        }

        /**
         * Set tenantCodes
         * @param tenantCodes A list of a CA tenant&#39;s source tenants codes. The maximum length is 1000. (optional)
         * @return RemoveSourceTenantsRequestBuilder
         */
        public RemoveSourceTenantsRequestBuilder tenantCodes(List<String> tenantCodes) {
            this.tenantCodes = tenantCodes;
            return this;
        }
        
        /**
         * Set tenantId
         * @param tenantId The ID of the tenant. For example, WFF_{XXX}~CA{YYY} where {XXX} is the administrating tenant code and {YYY}  is the consolidated analytic tenant code. (optional)
         * @return RemoveSourceTenantsRequestBuilder
         */
        public RemoveSourceTenantsRequestBuilder tenantId(String tenantId) {
            this.tenantId = tenantId;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The maximum number of source tenants to return. The maximum value is 1000. Default is 400. (optional)
         * @return RemoveSourceTenantsRequestBuilder
         */
        public RemoveSourceTenantsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for removeSourceTenants
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TenantCodeBody tenantCodeBody = buildBodyParams();
            return removeSourceTenantsCall(tenantCodeBody, tenantId, limit, _callback);
        }

        private TenantCodeBody buildBodyParams() {
            TenantCodeBody tenantCodeBody = new TenantCodeBody();
            tenantCodeBody.tenantCodes(this.tenantCodes);
            return tenantCodeBody;
        }

        /**
         * Execute removeSourceTenants request
         * @return ConsolidatedAnalyticsAPISourceTenantListDTO
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ConsolidatedAnalyticsAPISourceTenantListDTO execute() throws ApiException {
            TenantCodeBody tenantCodeBody = buildBodyParams();
            ApiResponse<ConsolidatedAnalyticsAPISourceTenantListDTO> localVarResp = removeSourceTenantsWithHttpInfo(tenantCodeBody, tenantId, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeSourceTenants request with HTTP info returned
         * @return ApiResponse&lt;ConsolidatedAnalyticsAPISourceTenantListDTO&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ConsolidatedAnalyticsAPISourceTenantListDTO> executeWithHttpInfo() throws ApiException {
            TenantCodeBody tenantCodeBody = buildBodyParams();
            return removeSourceTenantsWithHttpInfo(tenantCodeBody, tenantId, limit);
        }

        /**
         * Execute removeSourceTenants request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ConsolidatedAnalyticsAPISourceTenantListDTO> _callback) throws ApiException {
            TenantCodeBody tenantCodeBody = buildBodyParams();
            return removeSourceTenantsAsync(tenantCodeBody, tenantId, limit, _callback);
        }
    }

    /**
     * Remove source tenants from a consolidated analytics tenants
     * This API removes source tenants from the list of source tenants for a consolidated analytics tenant.   If successful, the response returns an updated list of source tenants.   &lt;br&gt;**Note:** &lt;em&gt;This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.  If you are interested in using this API, please contact your Customer Success Manager (CSM).&lt;/em&gt;
     * @param tenantCodeBody  (required)
     * @return RemoveSourceTenantsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public RemoveSourceTenantsRequestBuilder removeSourceTenants() throws IllegalArgumentException {
        return new RemoveSourceTenantsRequestBuilder();
    }
    private okhttp3.Call setExcludedSourcesCall(ExcludedSourcesBody excludedSourcesBody, String tenantId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = excludedSourcesBody;

        // create path and map variables
        String localVarPath = "/v1alpha/admin/consolidated-analytics/tenants/:tenantId/excluded-sources";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setExcludedSourcesValidateBeforeCall(ExcludedSourcesBody excludedSourcesBody, String tenantId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'excludedSourcesBody' is set
        if (excludedSourcesBody == null) {
            throw new ApiException("Missing the required parameter 'excludedSourcesBody' when calling setExcludedSources(Async)");
        }

        return setExcludedSourcesCall(excludedSourcesBody, tenantId, _callback);

    }


    private ApiResponse<ConsolidatedAnalyticsAPIExcludedSourcesListDTO> setExcludedSourcesWithHttpInfo(ExcludedSourcesBody excludedSourcesBody, String tenantId) throws ApiException {
        okhttp3.Call localVarCall = setExcludedSourcesValidateBeforeCall(excludedSourcesBody, tenantId, null);
        Type localVarReturnType = new TypeToken<ConsolidatedAnalyticsAPIExcludedSourcesListDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call setExcludedSourcesAsync(ExcludedSourcesBody excludedSourcesBody, String tenantId, final ApiCallback<ConsolidatedAnalyticsAPIExcludedSourcesListDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = setExcludedSourcesValidateBeforeCall(excludedSourcesBody, tenantId, _callback);
        Type localVarReturnType = new TypeToken<ConsolidatedAnalyticsAPIExcludedSourcesListDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SetExcludedSourcesRequestBuilder {
        private List<String> excludedSources;
        private String tenantId;

        private SetExcludedSourcesRequestBuilder() {
        }

        /**
         * Set excludedSources
         * @param excludedSources A list of a CA tenant&#39;s excluded sources. (optional)
         * @return SetExcludedSourcesRequestBuilder
         */
        public SetExcludedSourcesRequestBuilder excludedSources(List<String> excludedSources) {
            this.excludedSources = excludedSources;
            return this;
        }
        
        /**
         * Set tenantId
         * @param tenantId The ID of the tenant. For example, WFF_{XXX}~CA{YYY} where {XXX} is the administrating tenant code and {YYY}  is the consolidated analytic tenant code. (optional)
         * @return SetExcludedSourcesRequestBuilder
         */
        public SetExcludedSourcesRequestBuilder tenantId(String tenantId) {
            this.tenantId = tenantId;
            return this;
        }
        
        /**
         * Build call for setExcludedSources
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ExcludedSourcesBody excludedSourcesBody = buildBodyParams();
            return setExcludedSourcesCall(excludedSourcesBody, tenantId, _callback);
        }

        private ExcludedSourcesBody buildBodyParams() {
            ExcludedSourcesBody excludedSourcesBody = new ExcludedSourcesBody();
            excludedSourcesBody.excludedSources(this.excludedSources);
            return excludedSourcesBody;
        }

        /**
         * Execute setExcludedSources request
         * @return ConsolidatedAnalyticsAPIExcludedSourcesListDTO
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ConsolidatedAnalyticsAPIExcludedSourcesListDTO execute() throws ApiException {
            ExcludedSourcesBody excludedSourcesBody = buildBodyParams();
            ApiResponse<ConsolidatedAnalyticsAPIExcludedSourcesListDTO> localVarResp = setExcludedSourcesWithHttpInfo(excludedSourcesBody, tenantId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute setExcludedSources request with HTTP info returned
         * @return ApiResponse&lt;ConsolidatedAnalyticsAPIExcludedSourcesListDTO&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ConsolidatedAnalyticsAPIExcludedSourcesListDTO> executeWithHttpInfo() throws ApiException {
            ExcludedSourcesBody excludedSourcesBody = buildBodyParams();
            return setExcludedSourcesWithHttpInfo(excludedSourcesBody, tenantId);
        }

        /**
         * Execute setExcludedSources request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ConsolidatedAnalyticsAPIExcludedSourcesListDTO> _callback) throws ApiException {
            ExcludedSourcesBody excludedSourcesBody = buildBodyParams();
            return setExcludedSourcesAsync(excludedSourcesBody, tenantId, _callback);
        }
    }

    /**
     * Set a consolidated analytics tenant&#39;s excluded sources
     * This API defines the excluded sources for a consolidated analytics tenant.   After you create a CA tenant, you may optionally define a list of excluded sources. The excluded sources are the sources whose data is excluded from the CA tenant.  You can also use this API to replace the list of excluded sources for an existing CA tenant.   &lt;br&gt;**Note:** &lt;em&gt;This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.  If you are interested in using this API, please contact your Customer Success Manager (CSM).&lt;/em&gt;
     * @param excludedSourcesBody  (required)
     * @return SetExcludedSourcesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public SetExcludedSourcesRequestBuilder setExcludedSources() throws IllegalArgumentException {
        return new SetExcludedSourcesRequestBuilder();
    }
    private okhttp3.Call setSourceTenantsCall(TenantCodeBody tenantCodeBody, String tenantId, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tenantCodeBody;

        // create path and map variables
        String localVarPath = "/v1alpha/admin/consolidated-analytics/tenants/:tenantId/source-tenants";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setSourceTenantsValidateBeforeCall(TenantCodeBody tenantCodeBody, String tenantId, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantCodeBody' is set
        if (tenantCodeBody == null) {
            throw new ApiException("Missing the required parameter 'tenantCodeBody' when calling setSourceTenants(Async)");
        }

        return setSourceTenantsCall(tenantCodeBody, tenantId, limit, _callback);

    }


    private ApiResponse<ConsolidatedAnalyticsAPISourceTenantListDTO> setSourceTenantsWithHttpInfo(TenantCodeBody tenantCodeBody, String tenantId, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = setSourceTenantsValidateBeforeCall(tenantCodeBody, tenantId, limit, null);
        Type localVarReturnType = new TypeToken<ConsolidatedAnalyticsAPISourceTenantListDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call setSourceTenantsAsync(TenantCodeBody tenantCodeBody, String tenantId, Integer limit, final ApiCallback<ConsolidatedAnalyticsAPISourceTenantListDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = setSourceTenantsValidateBeforeCall(tenantCodeBody, tenantId, limit, _callback);
        Type localVarReturnType = new TypeToken<ConsolidatedAnalyticsAPISourceTenantListDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SetSourceTenantsRequestBuilder {
        private List<String> tenantCodes;
        private String tenantId;
        private Integer limit;

        private SetSourceTenantsRequestBuilder() {
        }

        /**
         * Set tenantCodes
         * @param tenantCodes A list of a CA tenant&#39;s source tenants codes. The maximum length is 1000. (optional)
         * @return SetSourceTenantsRequestBuilder
         */
        public SetSourceTenantsRequestBuilder tenantCodes(List<String> tenantCodes) {
            this.tenantCodes = tenantCodes;
            return this;
        }
        
        /**
         * Set tenantId
         * @param tenantId The ID of the tenant. For example, WFF_{XXX}~CA{YYY} where {XXX} is the administrating tenant code and {YYY}  is the consolidated analytic tenant code. (optional)
         * @return SetSourceTenantsRequestBuilder
         */
        public SetSourceTenantsRequestBuilder tenantId(String tenantId) {
            this.tenantId = tenantId;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The maximum number of source tenants to return. The maximum value is 1000. Default is 400. (optional)
         * @return SetSourceTenantsRequestBuilder
         */
        public SetSourceTenantsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for setSourceTenants
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TenantCodeBody tenantCodeBody = buildBodyParams();
            return setSourceTenantsCall(tenantCodeBody, tenantId, limit, _callback);
        }

        private TenantCodeBody buildBodyParams() {
            TenantCodeBody tenantCodeBody = new TenantCodeBody();
            tenantCodeBody.tenantCodes(this.tenantCodes);
            return tenantCodeBody;
        }

        /**
         * Execute setSourceTenants request
         * @return ConsolidatedAnalyticsAPISourceTenantListDTO
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ConsolidatedAnalyticsAPISourceTenantListDTO execute() throws ApiException {
            TenantCodeBody tenantCodeBody = buildBodyParams();
            ApiResponse<ConsolidatedAnalyticsAPISourceTenantListDTO> localVarResp = setSourceTenantsWithHttpInfo(tenantCodeBody, tenantId, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute setSourceTenants request with HTTP info returned
         * @return ApiResponse&lt;ConsolidatedAnalyticsAPISourceTenantListDTO&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ConsolidatedAnalyticsAPISourceTenantListDTO> executeWithHttpInfo() throws ApiException {
            TenantCodeBody tenantCodeBody = buildBodyParams();
            return setSourceTenantsWithHttpInfo(tenantCodeBody, tenantId, limit);
        }

        /**
         * Execute setSourceTenants request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ConsolidatedAnalyticsAPISourceTenantListDTO> _callback) throws ApiException {
            TenantCodeBody tenantCodeBody = buildBodyParams();
            return setSourceTenantsAsync(tenantCodeBody, tenantId, limit, _callback);
        }
    }

    /**
     * Set a consolidated analytics tenant&#39;s source tenants
     * This API defines the source tenants for a consolidated analytics tenant.   After you create a CA tenant, you must define a list of its source tenants. The source tenants are the tenants whose data is aggregated in the CA tenant.  You can also use this API to replace the list of source tenants for an existing CA tenant.   If successful, the response returns an updated list of source tenants.   &lt;br&gt;**Note:** &lt;em&gt;This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.  If you are interested in using this API, please contact your Customer Success Manager (CSM).&lt;/em&gt;
     * @param tenantCodeBody  (required)
     * @return SetSourceTenantsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public SetSourceTenantsRequestBuilder setSourceTenants() throws IllegalArgumentException {
        return new SetSourceTenantsRequestBuilder();
    }
}
